/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.2/userguide/building_java_projects.html
 */

plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
    id 'org.bytedeco.gradle-javacpp-build' version "$javacppVersion"
    id 'ivy-publish'
}

version = '0.0.1'
group = 'org.playstrategy'


repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.2'

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:30.1.1-jre'

    api "org.bytedeco:javacpp:$javacppVersion"
}

tasks.withType(org.bytedeco.gradle.javacpp.BuildTask) {
    // set here default values for all build tasks below, typically just includePath and linkPath,
    // but also properties to set the path to the NDK and its compiler in the case of Android
    includePath = [
        "$buildDir/../../thirdparty/Fairy-Stockfish-Lib/vendor/Fairy-Stockfish/src/",
        "$buildDir/../../thirdparty/Fairy-Stockfish-Lib/src/"
    ]
    linkPath = ["$buildDir/../../thirdparty/Fairy-Stockfish-Lib/build"]
}

javacppBuildCommand {
    // typically set here the buildCommand to the script that fills up includePath and linkPath
}

javacppBuildParser {
    // typically set here the classOrPackageNames to class names implementing InfoMap
}

javacppBuildCompiler {
    // typically set here boolean flags like copyLibs
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

publishing {
    repositories {
        ivy {
            url = layout.buildDirectory.dir("repo")
            patternLayout {
                artifact '[organisation]/[module]/[revision]/[type]s/[artifact](.[ext])'
                ivy '[organisation]/[module]/[revision]/[type]s/[artifact](.[ext])'
            }
        }
    }
    publications {
        ivy(IvyPublication) {
            from components.java
            descriptor.description {
                text = providers.provider({ description })
            }
        }
    }
}
